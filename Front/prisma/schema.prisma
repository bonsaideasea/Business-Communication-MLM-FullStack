generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VOICE
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  messages      Message[]
  settings      Settings?
  profile       Profile? // Changed to optional relation to Profile
  friends       Friend[]  @relation("UserFriends") // Added relation to Friend
  friendOf      Friend[]  @relation("UserFriendOf") // Added inverse relation to Friend
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Defines relation with User model

  @@id([provider, providerAccountId]) // Composite primary key
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique
  name   String
  imgURL String @db.Text
  email  String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Defines relation with User model
  servers  Server[]
  members  Member[]
  channels Channel[]
}

model Server {
  id         String  @id @default(uuid())
  name       String
  imageURL   String? @db.Text // Added imageURL field
  inviteCode String  @db.Text // Added inviteCode field
  profileId  String
  profile    Profile @relation(fields: [profileId], references: [id], onDelete: Cascade) // Changed relation to Profile

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  Member[] // Changed from Member to members
  channels Channel[] // Changed from Channel to channels

  @@index([profileId]) // Index on profileId for optimization
}

model Member {
  id        String     @id @default(uuid())
  role      MemberRole @default(GUEST)
  profileId String
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId]) // Index on profileId for optimization
  @@index([serverId]) // Index on serverId for optimization
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT) // Added type field
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId]) // Index on profileId for optimization
  @@index([serverId]) // Index on serverId for optimization
}

model Message {
  id        String  @id @default(cuid())
  content   String
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id          Int    @id @default(autoincrement())
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id])
  username    String @unique
  name        String
  dob         String
  business    String
  memberSince String
  email       String @unique
  phone       String @unique
  country     String
  language    String
  about       String
}

model Friend {
  id       String @id @default(cuid())
  userId   String
  friendId String

  user   User @relation("UserFriends", fields: [userId], references: [id]) // Defines relation with User model for userId
  friend User @relation("UserFriendOf", fields: [friendId], references: [id]) // Defines relation with User model for friendId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId]) // Ensures each pair of userId and friendId is unique
}